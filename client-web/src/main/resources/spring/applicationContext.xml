<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
       xmlns:util="http://www.springframework.org/schema/util" xmlns="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd"
>

    <!-- 消费方应用名，用于计算依赖关系，不是匹配条件，不要与提供方一样 -->
    <dubbo:application name="web-client"/>
    <dubbo:registry protocol="dubbo" address="zookeeper://127.0.0.1:2181" file="${server.dubbo.registry.file}"/>
    <dubbo:provider retries="0" filter="tracingFilter"/>
    <dubbo:consumer retries="0" filter="tracingFilter"/>


    <context:property-placeholder location="classpath*:*.properties" ignore-unresolvable="true"/>
    <context:annotation-config/>


    <bean id="sender" class="zipkin2.reporter.beans.KafkaSenderFactoryBean">
        <!--<property name="endpoint" value="http://localhost:9411/api/v2/spans"/>-->
        <property name="bootstrapServers" value="localhost:9092"/>
        <property name="topic" value="zipkin"/>
    </bean>
    <!-- Controls aspects of tracing such as the service name that shows up in the UI -->
    <bean id="tracing" class="brave.spring.beans.TracingFactoryBean">
        <property name="localServiceName" value="brave-webmvc-example"/>
        <property name="spanReporter">
            <bean class="zipkin2.reporter.beans.AsyncReporterFactoryBean">
                <property name="encoder" value="JSON_V2"/>
                <property name="sender" ref="sender"/>
                <!-- wait up to half a second for any in-flight spans on close -->
                <property name="closeTimeout" value="500"/>
            </bean>
        </property>
        <property name="propagationFactory">
            <bean id="propagationFactory" class="brave.propagation.ExtraFieldPropagation"
                  factory-method="newFactory">
                <constructor-arg index="0">
                    <util:constant static-field="brave.propagation.B3Propagation.FACTORY"/>
                </constructor-arg>
                <constructor-arg index="1">
                    <list>
                        <value>user-name</value>
                    </list>
                </constructor-arg>
            </bean>
        </property>
        <property name="currentTraceContext">
            <bean class="brave.spring.beans.CurrentTraceContextFactoryBean">
                <property name="scopeDecorators">
                    <bean class="brave.context.slf4j.MDCScopeDecorator" factory-method="create"/>
                </property>
            </bean>
        </property>
        <!--<property name="currentTraceContext">-->
        <!--<bean class="brave.context.slf4j.MDCCurrentTraceContext" factory-method="create"/>-->
        <!--</property>-->
    </bean>

    <!-- Allows someone to add tags to a span if a trace is in progress, via SpanCustomizer -->
    <bean id="spanCustomizer" class="brave.CurrentSpanCustomizer" factory-method="create">
        <constructor-arg index="0" ref="tracing"/>
    </bean>

    <!-- Decides how to name and tag spans. By default they are named the same as the http method. -->
    <bean id="httpTracing" class="brave.spring.beans.HttpTracingFactoryBean">
        <property name="tracing" ref="tracing"/>
    </bean>
</beans>
